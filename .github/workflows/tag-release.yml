name: Auto tag-release-publish

on:
  push:
    branches:
      - master

jobs:
  tag:
    name: Create tag for new version
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_new_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - uses: salsify/action-detect-and-tag-new-version@v2
        id: create_new_tag

  release:
    name: Create release
    runs-on: ubuntu-latest
    needs: tag
    if: needs.tag.outputs.tag_name
    steps:
      - uses: actions/checkout@v2
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.tag.outputs.tag_name }}
          release_name: ${{ needs.tag.outputs.tag_name }}
          draft: false
          prerelease: false

  npm-publish:
    name: Build and publish
    runs-on: ubuntu-latest
    needs: tag
    if: needs.tag.outputs.tag_name
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
          registry-url: 'https://registry.npmjs.org'
      - run: yarn
      - run: yarn build
      - run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  docker:
    name: Build & Push to DockerHub
    runs-on: ubuntu-latest
    needs: tag
    if: needs.tag.outputs.tag_name
    steps:
      - uses: actions/checkout@v2

      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }} | docker login -u ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME}} --password-stdin

      - name: Clone the docker repo
        run: |
          git clone https://github.com/ethereum-optimism/docker.git \
              $HOME/docker

      - name: Build and push Deployer image to DockerHub
        run: |
          cd $HOME/docker
          ./build.sh -s deployer -b ${{ needs.tag.outputs.tag_name }}
          docker push ethereumoptimism/deployer:${{ needs.tag.outputs.tag_name }}

      - name: Extract State Dump from Deployer Image
        run: docker run --rm --entrypoint cat ethereumoptimism/deployer:${{ steps.get_version.outputs.VERSION }} /opt/contracts/build/dumps/state-dump.latest.json > ${{ steps.get_version.outputs.VERSION }}.json

      - name: Store state dump artifact for git job
        uses: actions/upload-artifact@v2
        with:
          name: state-dump-artifact
          path: ${{ steps.get_version.outputs.VERSION }}.json

      - name: Logout of DockerHub
        run: docker logout

  git:
    name: Commit State Dump
    needs: docker
    runs-on: ubuntu-latest
    needs: tag
    if: needs.tag.outputs.tag_name

    steps:
      - uses: actions/checkout@v2
        with:
          repository: ethereum-optimism/regenesis
          ssh-key: ${{ secrets.REGENESIS_DEPLOY_KEY }}

      - name: Download State Dump Artifact
        uses: actions/download-artifact@v2
        with:
          name: state-dump-artifact
          path: ./tags

      - name: Commit to Repository
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: master
          commit_message: Add tagged state dump artfiact
          commit_user_name: GitHub Action
          commit_user_email: action@github.com
          commit_author: Github Action <action@github.com>
